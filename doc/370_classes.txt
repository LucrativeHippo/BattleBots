CMPT 370 Class outlines


GameController(controller) implements ActionListener, KeyListener
	Attributes
		GAMEWIDTH
		GAMEHEIGHT
		numhumans
		numplayers
		boardsize

					
	Functions
		handleEvent(keyPress)
		handleEvent(HexClick)
		handleEvent(buttonPress)
		startGame()

The GameController class allows user and AI input on the games models and
updates the display(view) acoordingly. The GAMEWIDTH and GAMEHEIGHT attributes
are global variables representing the desired size of the game screen. There
are three separate handleEvent functions. The first is utilized only during
the game screen and allows the user to move the robot using the AWEDXZ keys on
the keyboard. The second is also only utilized during the game screen and
allows the human player to shoot other rbots by clicking on them with the
mouse. The third and final handleEvent function is used to navigate throughout
all the game screens and the game itself using the mouse to click on the
navigation buttons such as continue and quit. The startGame function creates a
game screen of a set size and takes the user to the MainMenu panel, the games
beginning. 



View(view) extends JFrame
	Attributes

	Functions
		createView(width, height)
		createPanel(panelClass)
		showMainMenu(actionListener)
		showHelpPanel(actionListener)
		showGamePropertiesPanel(actionListener     )
		showTeamSelectionPanel(actionListener, keyListener     )
		showWinnerPanel(actionListener)
		showStatsPanel(actionListener, StatsTracker)
		showGamePanel(actionListner, keyListener, )		
		
The View class is the "view" in MCV architecture and is a frame that displays
the various views of the game. The createView function intiaites the view
frame at the desired size while the createPanel function creates a basic panel
which contains no content. Then next 7 functions display the various Panels of
the game including the MainMenu, HelpPanel, GameProperties,
TeamSelectionPanel, WinnerPanel, StatsPanel, and GamePanel with an actionListener and a keyListener as required.		

		
gangClass(model)
	Attributes
		gangColour
		numRobots
		Scout
		Sniper
		Tank
		
	Functions
		CreateGang(gangColour)	
		getgangColour()
		getnumRobots()
		setnumRobots()

The gangClass will represent each team colour on the game board and contains
the attributes gangColour representing its team colour and numRobots showing
the number of remaining robots on the team. The CreateGang function takes in
the teams colour as a parameter and creates the corresponding scout, sniper
and tank. There is basic get functions for the gangColour and numRobots
allowing for easy access and a set function for numRobots allowing editing to
show when robots are killed.

gangClass(model)
	Attributes
		gangColour
		numRobots
		ScoutAI
		SniperAI
		TankAI
		
	Functions
		CreateGang(gangColour)	
		getgangColour()
		getnumRobots()
		setnumRobots()
		
		???????????????????????????????

GameBoard(model)
	Attributes
		HexSpace spaces[x][y]			
			
	Functions
		getRobots()
		CreateGameBoard(boardsize)

The GameBoard class represents the hex grid on which the game is played, it
will utilize a 2-dimensional coordinate system with the center of the board
being the origin(0,0). The Hexspace attribute is an array that contains every
hex on the gameboard with its corresponding coordinate value. There are two
functions, the getRobots function creates a list of every robot on the
pa
the correct board size picked in game properties. 

HexSpace(model)
	Attributes
		robotArray
		isEmpty

	Functions
		getisEmpty()
		setisEmpty()
		

The HexSpace class will be the individual hexagon spaces that make up the game
board.  Each space must be able to store a robot of any type (scout, sniper,
tank) in an array.  The amount of HexSpaces will be initialized by the
GameBoard Class. It includes the attributes isEmpty which will be true if no
robots are on the hex, and robotArray which is an array that contains every
robot on the hex. 

		
Robot(model)
	Attributes
		ShotsLeft
		Movement
		Range
		Damage
		movementLeft
		health
		healthLeft
		relativeDirection
		directionDimension
		isTurn	
		robotType
		gang
		horizontalLocation
		verticalLocation

	Functions
		Create_Robot()
		getMovement()
		getShotsLeft()
		getRange()
		getDamage()
		getmovementLeft()
		gethealth()
		getrelativeDirection()
		getdirectionDimension()
		gethealthLeft()		
		getrobotType()
		getgang()
		getisTurn()
		setisTurn()
		setrobotType()
		setgang()
		sethealthleft()
		setmovementLeft()	
		setreleativeDirection()
		setdirectionDimension()
		setShotsLeft()
		setIsTurn()
		getIsTurn()

The robot class will represent the basic robot type and will contain
attributes used for every robot subtype, including; the robots movement range,
attack range, shot damage, remaining movement left, the direction relative to
the game board, if its the robots turn or not, the current directions dimension it
is facing (whether it is 1,2 or 3 squares away depending on the range) its
type(scout, sniper or tank), its team or gang and its current health value. It also
contains several important functions including; a basic create_robot function
that creates a robot object with attributes set to default values, it also
contains a getvalue function for each of its attributes allowing access to
each attributes value and a setvalue function for its health, direction,
direction dimension, isTurn, robot type, gang/team, shots left and movement allowing the values to be incremented.  

Each of the Scout, Sniper and Tank classes extend the basic robot class
and will be the robot objects controlled by the games artificial intelligence
and human players. They all have the four attributes movement, range, damage
and health from the basic robot class, but each is now set to the robot types
default values. An updated create function now makes a new specific type robot with the appropriate attribute values.      


Scout(model) extends the Robot class
	Attibutes
		Movement = 3
        	Range = 2
        	Damage = 1
        	Health = 1

	Functions
		Create_Scout() - changes the Create_Robot() function to create robot
		with specific stats

Sniper(model) extends the Robot class
        Attibutes
        	Movement = 2
        	Range = 3
        	Damage = 2
        	Health = 2

        Functions
        	Create_Sniper() - changes the Create_Robot() function to create robot
		with specific stats

Tank(model) extends the Robot class
        Attibutes
        	Movement = 1
        	Range = 1
        	Damage = 3
        	Health = 3

        Functions
    	        Create_Tank() - changes the Create_Robot() function to create robot
		with specific stats


ScoutAI(model) extends Scout class
        Attributes
        
        Functions
            Create_ScoutAI()
            move(target)
            shoot(target)
            scan(horizontalLocation, verticalLocation)
            turn(direction)
            
SniperAI(model) extends Sniper class
        Attributes
        
        Functions
            Create_SniperAI()
            move(target)
            shoot(target)
            scan(horizontalLocation, verticalLocation)
            turn(direction)
            
TankAI(model) extends Tank class
        Attributes
        
        Functions
            Create_TankAI()
            move(target)
            shoot(target)
            scan(horizontalLocation, verticalLocation)
            turn(direction)


RobotStats(Model)
	Attributes
		kills
		deaths
		plays
		endedAlive
		wins
		loses
		damageInflicted
		damageAbsorbed
		distanceTravelled

	Functions
		CreateRobotStats()
		getkills()
                getdeaths()
                getplays()
                getendedAlive()
                getwins()
                getloses()
                getdamageInflicted()
                getdamageAbsorbed()
                getdistanceTravelled()
		setkills()
                setdeaths()
                setplays()
                setendedAlive()
                setwins()
                setloses()
                setdamageInflicted()
                setdamageAbsorbed()
                setdistanceTravelled()

The RobotStats class tracks the stats of each robot during the game it keeps
track of the attributes kills, deaths, games played, games ended alive, wins,
loses, damage inflicted, damage absorbed, and distance travelled. The create
function initiates a RobotStats object with all attributes set to zero. For each
attribute there is a set and get function to allow access and manipulation of
the attribute values. 


StatsTracker(Model)
	Attributes
		Robots[]

	Functions
		CreateStatsTracker()

The StatsTracker class is a collection of all the robot stats for each robot
in the current game. Its sole attribute is an array that contains the
RobotStats for each robot in the game. Its create function makes an object
that takes in every robot in the games and creates a RobotStats for each one
in the array.

        
MainMenu extends JPanel
	Attributes

	Functions
		mainMenuCreate()

MainMenu class has only one function, its create function which initiates a
MainMenu object with three JButtons, Begin, Help and Quit.

HelpPanel extends JPanel
	Attributes
		
	Functions
		helpPanelCreate()
The HelpPanel class only has a create function that makes an object with the
two Jbuttons, Back and Quit also well as a block of text describing the rules
of the game.

GamePropertiesPanel extends JPanel
	Attributes
		
	Functions
		gamePropertiesCreate()

The GameProperties has no attributes, and its create function generates 3 sets
of radio buttons for the nmber of players, number of humans, and the board
length.
				

?????????????????????????
TeamSelectionPanel extends JPanel
	Attributes
		
	Function
		teamSelectionCreate()
		updatedisplayTeams()
??????????????????????????


WinnerPanel extends JPanel
	Attributes
		
	Functions
		winnerCreate()
The WinnerPanel has only a create function which constructs an objects with
three Jbuttons called Play Again, Stats, and Quit.


StatsPanel extends JPanel
	Attributes
		
	Functions
		statsCreate()

The StatsPanel has no attributes and its only function is its create function,
which builds an object with two Jbuttons, Play Again and Quit,  and the updated stats of the game

GamePanel extends JPanel
	Attributes

	Functions
		GameCreate(keyListener, ????????)
		drawImage()
		drawString()
		updateGame()
		
The GamePanel is the actual game board panel on which the game is played. It
has no Attributes and four functions.????????????? The GameCreate
functio????????????????????The drawImage function draws an image of
a specific type at a specific location. The drawString function draws a string
of characters at a specified location. The updateGame function updates the
view by checking if the positions of the game objects have changed and calling the drawImage
and drawString functions to redraw the game panel with the correct new
positions.