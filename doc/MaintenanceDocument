
as Built architecture

  The architecture that BattleBots implements is Model-View-Controller. This architecture is separated into three distinct parts. The Controller starts up the game and interacts with the View to coordinate what should be displayed to the user. The View displays the GUI's and takes the users input. The Model contains the information and structure of the game. It interacts with controller and keeps track of the current state of the game. With traditional Model-View-Controller architecture there is supposed to be no interactions between the Model and the View, but we do violate this slightly for reasons explained more later.

  The main class is the GameController class which is part of the Controller. From there, the program initializes default AI code, and tells the view to start up and display the first GUI. When the user interacts with the GUI, the View sends the controller the users input. All of this is done prior to the actual game being started. Once the user provides the necessary information the controller needs (such as the number of Players, number of humans, which AI code to use, and the board size) the controller interacts with the Model to initialize the game and create the proper number of robots, AI robots, etc, and add them to their team. We have a Gang, and a GangAI class to keep track of which robots are a part of each team. The GameController class then puts the created robots into lists to keep track of their current state. The GameController also initializes each robots starting position on the gameboard. To do this we designed the GameBoard class to be a two dimensional array of Hex spaces. In the Hex class we described each hexagon to have a list of robots. This list contains all of the robots that are on the space at a given time.
While the game is running, the View recieves input from the user in the GamePanel class, which acts as a secondary controller, by taking the input 
and updating the state of the game. We made this class to more efficiently 
translate the input into changing the game state. This is because the GamePanel is responsible for detecting when the user moves a robot, or shoots at a Hex space, and after that happens, the model must know how these actions changed the state of the game. This is why we decided to violate the traditional Model-View-Controller architecture by allowing comunication between the GamePanel and the Model classes Gameboard, Hex, and Robot. If there are AI robots in the game we needed a class to convert the forth code that the AI uses, into Java. Because of this we created a Interpretor, and wordTranslator class that takes forth code and translates from JSON to usable Java robot AI code. During game play, the AI robots statistics are kept track of and when each game is finished, the View will display these statistics.

One complex part of the code that we did not design prior to coding was the wordTranslator class. This class is essentially a dictionary of strings in a hashMap after the Interpreter has turned the JSON code into a stack the wordTranslator executes each string on the stack in order. The hashMap contains many pre-coded entries with corresponding anonymous functions, but can also dynamically create variables and functions and insert their keys into the hashMap.


changes in architecture
  Added an OverallGamePanel to put the gamePanel and other things together and nicely formatted, and we also used the gamePanel class as a secondary controller class to more directly and efficiently access and alter the state of the game. We decided that this was the right way to do it, even though it violated our architecture, because it is not as efficient as interacting through the controller. The controller does not need to know about this interaction.
Controller During the design process we did not yet fully understand the forth language and how it works because none of us have ever used it before. Because of this we did not realize what was needed for this, and we had to add the Interpretor, and wordTranslator classes to our architecture.
  

  
  
  

  
  
